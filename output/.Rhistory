summary(model3.2)
# Calculate average productivity score for each employee
temp_promotion <- current %>% select(employee_id, productivity) %>% group_by(employee_id) %>% summarise_at(vars(productivity),
list(avg_productivity = mean)) %>%
summarise(year_service = n()/4)
# Calculate average productivity score for each employee
temp_promotion <- current %>% select(employee_id, productivity) %>% group_by(employee_id) %>% summarise_at(vars(productivity),
list(avg_productivity = mean)) %>%
summarise(year_service = n()/4)
promotion <- inner_join(promotion, temp_promotion, by = "employee_id")
# Calculate average productivity score for each employee
temp_promotion <- current %>% group_by(employee_id) %>% summarise_at(vars(productivity),
list(avg_productivity = mean)) %>%
summarise(year_service = n()/4)
promotion <- inner_join(promotion, temp_promotion, by = "employee_id")
View(temp_promotion)
# Calculate average productivity score for each employee
temp_promotion <- current %>% group_by(employee_id) %>% summarise_at(vars(productivity),
list(avg_productivity = mean))
promotion <- inner_join(promotion, temp_promotion, by = "employee_id")
# Calculate average productivity score for each employee
temp_promotion <- current %>% group_by(employee_id) %>% summarise_at(vars(productivity),
list(avg_productivity = mean)) %>%
mutate(year_service=n()/4)
promotion <- inner_join(promotion, temp_promotion, by = "employee_id")
# Calculate average productivity score for each employee
temp_promotion <- current %>% group_by(employee_id) %>% summarise_at(vars(productivity),
list(avg_productivity = mean))
promotion <- inner_join(promotion, temp_promotion, by = "employee_id")
# If the applicant is hired, final_hired = 1, otherwise final_hired = NA.
final_hires <- final_hires %>% mutate(final_hired = 1)
current <- black_saber_current_employees
promotion <- current %>% select(employee_id, role_seniority)
promotion <- unique(promotion)
promotion <- promotion %>% group_by(employee_id) %>% mutate(promotion =n_distinct(role_seniority) - 1)
promotion <- merge(current, promotion, by = "employee_id", all.x = TRUE)
promotion <- promotion %>% select(employee_id, gender, promotion) %>% filter(gender != "Prefer not to say")
promotion <- unique(promotion)
# Calculate average productivity score for each employee
temp_promotion <- current %>% group_by(employee_id) %>% summarise_at(vars(productivity),
list(avg_productivity = mean))
promotion <- inner_join(promotion, temp_promotion, by = "employee_id")
current <- black_saber_current_employees %>%
summarise(gender, team, length_service=n()/4)
promotion <- current %>% select(employee_id, role_seniority)
promotion <- unique(promotion)
promotion <- promotion %>% group_by(employee_id) %>% mutate(promotion =n_distinct(role_seniority) - 1)
promotion <- merge(current, promotion, by = "employee_id", all.x = TRUE)
promotion <- promotion %>% select(employee_id, gender, promotion) %>% filter(gender != "Prefer not to say")
promotion <- unique(promotion)
# Calculate average productivity score for each employee
temp_promotion <- current %>% group_by(employee_id) %>% summarise_at(vars(productivity),
list(avg_productivity = mean))
promotion <- inner_join(promotion, temp_promotion, by = "employee_id")
current <- black_saber_current_employees
promotion <- current %>% select(employee_id, role_seniority)
promotion <- unique(promotion)
promotion <- promotion %>% group_by(employee_id) %>% mutate(promotion =n_distinct(role_seniority) - 1)
promotion <- merge(current, promotion, by = "employee_id", all.x = TRUE)
promotion <- promotion %>% select(employee_id, gender, promotion) %>% filter(gender != "Prefer not to say")
promotion <- unique(promotion)
# Calculate average productivity score for each employee
temp_promotion <- current %>% group_by(employee_id) %>% summarise_at(vars(productivity),
list(avg_productivity = mean))
promotion <- inner_join(promotion, temp_promotion, by = "employee_id")
# Add Service Length
black_saber_current_employees <- black_saber_current_employees %>%
group_by(employee_id) %>%
summarise(gender, team, num_promotion=length(unique(role_seniority))-1, service_length=n()/4)
current <- black_saber_current_employees
promotion <- current %>% select(employee_id, role_seniority)
promotion <- unique(promotion)
promotion <- promotion %>% group_by(employee_id) %>% mutate(promotion =n_distinct(role_seniority) - 1)
promotion <- merge(current, promotion, by = "employee_id", all.x = TRUE)
promotion <- promotion %>% select(employee_id, gender, promotion) %>% filter(gender != "Prefer not to say")
promotion <- unique(promotion)
# Calculate average productivity score for each employee
temp_promotion <- current %>% group_by(employee_id) %>% summarise_at(vars(productivity),
list(avg_productivity = mean))
promotion <- inner_join(promotion, temp_promotion, by = "employee_id")
# Add Service Length
promotion <- black_saber_current_employees %>%
group_by(employee_id) %>%
summarise(gender, team, num_promotion=length(unique(role_seniority))-1, service_length=n()/4)
# Promotion Data
promotion <- black_saber_current_employees %>%
group_by(employee_id) %>%
summarise(gender, team, num_promotion=length(unique(role_seniority))-1, service_length=n()/4)
# Calculate average productivity score for each employee
temp_promotion <- current %>% group_by(employee_id) %>% summarise_at(vars(productivity),
list(avg_productivity = mean))
promotion <- inner_join(promotion, temp_promotion, by = "employee_id")
# Promotion Data
promotion <- black_saber_current_employees %>%
group_by(employee_id) %>%
filter(gender != "Preder not to say") %>%
summarise(gender, team, num_promotion=length(unique(role_seniority))-1, service_length=n()/4)
# Calculate average productivity score for each employee
temp_promotion <- current %>% group_by(employee_id) %>% summarise_at(vars(productivity),
list(avg_productivity = mean))
promotion <- inner_join(promotion, temp_promotion, by = "employee_id")
# Promotion Data
promotion <- black_saber_current_employees %>%
group_by(employee_id) %>%
filter(gender != "Preder not to say") %>%
summarise(gender, team, num_promotion=length(unique(role_seniority))-1, service_length=n()/4)
# Calculate average productivity score for each employee
temp_promotion <- current %>% group_by(employee_id) %>% summarise_at(vars(productivity),
list(avg_productivity = mean))
# If the applicant is hired, final_hired = 1, otherwise final_hired = NA.
final_hires <- final_hires %>% mutate(final_hired = 1)
# Promotion Data
promotion <- black_saber_current_employees %>%
group_by(employee_id) %>%
filter(gender != "Preder not to say") %>%
summarise(gender, team, num_promotion=length(unique(role_seniority))-1, service_length=n()/4)
# Promotion Data
promotion <- black_saber_current_employees %>%
group_by(employee_id) %>%
filter(gender != "Preder not to say") %>%
summarise(gender, team, num_promotion=length(unique(role_seniority))-1, service_length=n()/4)
# If the applicant is hired, final_hired = 1, otherwise final_hired = NA.
final_hires <- final_hires %>% mutate(final_hired = 1)
# If the applicant passed phase1, pass_phase1 = 1, otherwise = NA.
phase2_temp <- phase2_new_applicants %>%
select(applicant_id, technical_skills) %>% rename(pass_phase1 = technical_skills) %>% mutate(pass_phase1 = 1)
#Import Data
black_saber_current_employees <- read_csv("../input/data/black-saber-current-employees.csv")
final_hires <- read_csv("../input/data/final-hires-newgrad_2020.csv")
phase1_new_applicants <- read_csv("../input/data/phase1-new-grad-applicants-2020.csv")
phase2_new_applicants <- read_csv("../input/data/phase2-new-grad-applicants-2020.csv")
phase3_new_applicants <- read_csv("../input/data/phase3-new-grad-applicants-2020.csv")
# Removing the dollar signs in current employees data
black_saber_current_employees$salary <- as.numeric(gsub('[$,]','',black_saber_current_employees$salary))
# Add a quarter variable indicating the financial quarter but not the years
black_saber_current_employees<- black_saber_current_employees %>% mutate(quarter = as.character(ifelse(StrRight(financial_q, 1) == '1', '1',
ifelse(StrRight(financial_q, 1) == '2',
'2', ifelse(StrRight(financial_q, 1) == '3',
'3', ifelse(StrRight(financial_q, 1) == '4', '4', financial_q))))))
# Add a financial year variable indicating the financial year but not the quarters
black_saber_current_employees<- black_saber_current_employees %>% mutate(year = as.numeric(StrLeft(financial_q, 4)))
# Combined a few job seniority levels, ie. combined entry-level, junior I II III into junior, senior I II III into senior
black_saber_current_employees<- black_saber_current_employees %>% mutate(seniority = ifelse(role_seniority == 'Entry-level' | StrLeft(role_seniority, 6)
== 'Junior', 'Junior', ifelse(StrLeft(role_seniority, 6) == 'Senior',
'Senior', role_seniority)))
# Promotion Data
promotion <- black_saber_current_employees %>%
group_by(employee_id) %>%
filter(gender != "Preder not to say") %>%
summarise(gender, team, num_promotion=length(unique(role_seniority))-1, service_length=n()/4)
promotion %>% ggplot(aes(x = gender, y = promotion)) + geom_boxplot()
promotion %>% ggplot(aes(x = gender, y = num_promotion)) + geom_boxplot()
# Drop prefer not to say
black_saber_current_employees <- black_saber_current_employees %>%
filter(gender != "Prefer not to say")
# Promotion Data
promotion <- black_saber_current_employees %>%
group_by(employee_id) %>%
filter(gender != "Preder not to say") %>%
summarise(gender, team, num_promotion=length(unique(role_seniority))-1, service_length=n()/4)
# If the applicant is hired, final_hired = 1, otherwise final_hired = NA.
final_hires <- final_hires %>% mutate(final_hired = 1)
# If the applicant passed phase1, pass_phase1 = 1, otherwise = NA.
phase2_temp <- phase2_new_applicants %>%
select(applicant_id, technical_skills) %>% rename(pass_phase1 = technical_skills) %>% mutate(pass_phase1 = 1)
# If the applicant passed phase2, pass_phase2 = 1, otherwise = NA.
phase3_temp <- phase3_new_applicants %>%
select(applicant_id, interviewer_rating_1) %>% rename(pass_phase2 = interviewer_rating_1) %>% mutate(pass_phase2 = 1)
phase1_new_applicants <- phase1_new_applicants %>%
merge(final_hires, by = "applicant_id", all = TRUE) %>% merge(phase2_temp, by = "applicant_id", all = TRUE)
phase1_new_applicants
phase1_new_applicants <- phase1_new_applicants %>%
mutate(pass_phase1 = ifelse(is.na(pass_phase1), 0, 1)) %>% mutate(final_hired = ifelse(is.na(final_hired), 0, 1))
phase2_new_applicants <- phase2_new_applicants %>%
merge(final_hires, by = "applicant_id", all = TRUE)%>% merge(phase3_temp, by = "applicant_id", all = TRUE)
phase2_new_applicants <- phase2_new_applicants %>%
mutate(pass_phase2 = ifelse(is.na(pass_phase2), 0, 1)) %>% mutate(final_hired = ifelse(is.na(final_hired), 0, 1))
phase2_temp1 <- phase2_new_applicants %>% select(-final_hired, -pass_phase2)
phase3_new_applicants <- phase3_new_applicants %>%
merge(final_hires, by = "applicant_id", all = TRUE) %>% inner_join(phase2_temp1, by = "applicant_id")
phase3_new_applicants <- phase3_new_applicants %>%
mutate(final_hired = ifelse(is.na(final_hired), 0, 1))
#Export cleaned data
write.csv(black_saber_current_employees, "../output/clean/current.csv")
write.csv(phase1_new_applicants, "../output/clean/phase1_new.csv")
write.csv(phase2_new_applicants, "../output/clean/phase2_new.csv")
write.csv(phase3_new_applicants, "../output/clean/phase3_new.csv")
write.csv(promotion, "../output/clean/promotion.csv")
promotion %>% ggplot(aes(x = gender, y = num_promotion)) + geom_boxplot()
model3.1 <- glm(num_promotion ~ gender, data = promotion)
kable(tidy(model3.1))
summary(model3.1)
model3.2 <- glm(num_promotion ~ gender + avg_productivity, data = promotion)
model3.2 <- glm(num_promotion ~ gender + service_length, data = promotion)
kable(tidy(model3.2))
summary(model3.2)
summary(model3.2)
model3.3 <- glm(num_promotion ~ service_length, data = promotion)
kable(tidy(model3.3))
summary(model3.3)
lrtest(model3.2, model3.3)
lmtest::lrtest(model1.5, model1.1)
# Calculate average productivity score for each employee
temp_promotion <- black_saber_current_employees %>% group_by(employee_id) %>% summarise_at(vars(productivity),
list(avg_productivity = mean))
promotion <- inner_join(promotion, temp_promotion, by = "employee_id")
promotion <- inner_join(promotion, temp_promotion, by = "employee_id") %>% distinct()
#Import Data
black_saber_current_employees <- read_csv("../input/data/black-saber-current-employees.csv")
final_hires <- read_csv("../input/data/final-hires-newgrad_2020.csv")
phase1_new_applicants <- read_csv("../input/data/phase1-new-grad-applicants-2020.csv")
phase2_new_applicants <- read_csv("../input/data/phase2-new-grad-applicants-2020.csv")
phase3_new_applicants <- read_csv("../input/data/phase3-new-grad-applicants-2020.csv")
# Removing the dollar signs in current employees data
black_saber_current_employees$salary <- as.numeric(gsub('[$,]','',black_saber_current_employees$salary))
# Add a quarter variable indicating the financial quarter but not the years
black_saber_current_employees<- black_saber_current_employees %>% mutate(quarter = as.character(ifelse(StrRight(financial_q, 1) == '1', '1',
ifelse(StrRight(financial_q, 1) == '2',
'2', ifelse(StrRight(financial_q, 1) == '3',
'3', ifelse(StrRight(financial_q, 1) == '4', '4', financial_q))))))
# Add a financial year variable indicating the financial year but not the quarters
black_saber_current_employees<- black_saber_current_employees %>% mutate(year = as.numeric(StrLeft(financial_q, 4)))
# Combined a few job seniority levels, ie. combined entry-level, junior I II III into junior, senior I II III into senior
black_saber_current_employees<- black_saber_current_employees %>% mutate(seniority = ifelse(role_seniority == 'Entry-level' | StrLeft(role_seniority, 6)
== 'Junior', 'Junior', ifelse(StrLeft(role_seniority, 6) == 'Senior',
'Senior', role_seniority)))
# Drop prefer not to say
black_saber_current_employees <- black_saber_current_employees %>%
filter(gender != "Prefer not to say")
# Promotion Data
promotion <- black_saber_current_employees %>%
group_by(employee_id) %>%
filter(gender != "Preder not to say") %>%
summarise(gender, team, num_promotion=length(unique(role_seniority))-1, service_length=n()/4)
# Calculate average productivity score for each employee
temp_promotion <- black_saber_current_employees %>% group_by(employee_id) %>% summarise_at(vars(productivity),
list(avg_productivity = mean))
promotion <- inner_join(promotion, temp_promotion, by = "employee_id") %>% distinct()
# If the applicant is hired, final_hired = 1, otherwise final_hired = NA.
final_hires <- final_hires %>% mutate(final_hired = 1)
# If the applicant passed phase1, pass_phase1 = 1, otherwise = NA.
phase2_temp <- phase2_new_applicants %>%
select(applicant_id, technical_skills) %>% rename(pass_phase1 = technical_skills) %>% mutate(pass_phase1 = 1)
# If the applicant passed phase2, pass_phase2 = 1, otherwise = NA.
phase3_temp <- phase3_new_applicants %>%
select(applicant_id, interviewer_rating_1) %>% rename(pass_phase2 = interviewer_rating_1) %>% mutate(pass_phase2 = 1)
phase1_new_applicants <- phase1_new_applicants %>%
merge(final_hires, by = "applicant_id", all = TRUE) %>% merge(phase2_temp, by = "applicant_id", all = TRUE)
phase1_new_applicants
phase1_new_applicants <- phase1_new_applicants %>%
mutate(pass_phase1 = ifelse(is.na(pass_phase1), 0, 1)) %>% mutate(final_hired = ifelse(is.na(final_hired), 0, 1))
phase2_new_applicants <- phase2_new_applicants %>%
merge(final_hires, by = "applicant_id", all = TRUE)%>% merge(phase3_temp, by = "applicant_id", all = TRUE)
phase2_new_applicants <- phase2_new_applicants %>%
mutate(pass_phase2 = ifelse(is.na(pass_phase2), 0, 1)) %>% mutate(final_hired = ifelse(is.na(final_hired), 0, 1))
phase2_temp1 <- phase2_new_applicants %>% select(-final_hired, -pass_phase2)
phase3_new_applicants <- phase3_new_applicants %>%
merge(final_hires, by = "applicant_id", all = TRUE) %>% inner_join(phase2_temp1, by = "applicant_id")
phase3_new_applicants <- phase3_new_applicants %>%
mutate(final_hired = ifelse(is.na(final_hired), 0, 1))
#Export cleaned data
write.csv(black_saber_current_employees, "../output/clean/current.csv")
write.csv(phase1_new_applicants, "../output/clean/phase1_new.csv")
write.csv(phase2_new_applicants, "../output/clean/phase2_new.csv")
write.csv(phase3_new_applicants, "../output/clean/phase3_new.csv")
write.csv(promotion, "../output/clean/promotion.csv")
model3.1 <- glm(num_promotion ~ avg_productivity + gender, data = promotion)
kable(tidy(model3.1))
summary(model3.1)
summary(model3.1)
model3.2 <- glm(num_promotion ~ gender + service_length + avg_productivity, data = promotion)
kable(tidy(model3.2))
summary(model3.2)
summary(model3.2)
model3.3 <- glm(num_promotion ~ service_length + avg_productivity, data = promotion)
kable(tidy(model3.3))
summary(model3.3)
model3.1 <- glm(num_promotion ~ avg_productivity + gender + service_length, data = promotion)
kable(tidy(model3.1))
summary(model3.1)
model3.2 <- glm(num_promotion ~ gender + service_length, data = promotion)
kable(tidy(model3.2))
summary(model3.2)
model3.3 <- glm(num_promotion ~ service_length, data = promotion)
kable(tidy(model3.3))
summary(model3.3)
lrtest(model3.2, model3.3)
summary(model3.1)
summary(model3.1)
lrtest(model3.2, model3.3)
model3.3 <- glm(num_promotion ~ service_length, data = promotion)
kable(tidy(model3.3))
summary(model3.3)
lrtest(model3.2, model3.3)
promotion %>% ggplot(aes(x=service_length, y= num_promotion, col=gender))+
geom_point()
promotion %>% ggplot(aes(x=service_length, y= num_promotion, col=gender))+
geom_point()+xlab("service length")+ylab("number of promotions")
promotion %>% ggplot(aes(x=service_length, y= num_promotion, col=gender))+
geom_point()+xlab("service length")+ylab("number of promotions")
?tbl_summary
current%>%
select(salary,leadership_for_level,gender)%>%
kable(tbl_summary(by=gender))%>%
modify_header(label ~ "**Variable**")
current%>%
select(salary,leadership_for_level,gender)%>%
tbl_summary(by=gender)%>%
modify_header(label ~ "**Variable**")
current%>%
select(salary,leadership_for_level,gender)%>%
tbl_summary(by=gender)%>%
modify_header(label ~ "**Variable**")
# Import cleaned data
current <- read_csv("clean/current.csv")
promotion <- read_csv("clean/promotion.csv")
final_hires <- read_csv("clean/final-hires-newgrad_2020.csv")
phase1_new_applicants <- read_csv("clean/phase1_new.csv")
phase2_new_applicants <- read_csv("clean/phase2_new.csv")
phase3_new_applicants <- read_csv("clean/phase3_new.csv")
current%>%
select(salary,leadership_for_level,gender)%>%
tbl_summary(by=gender)%>%
modify_header(label ~ "**Variable**")
promotion %>% ggplot(aes(x = gender, y = num_promotion)) + geom_boxplot()+ylab("number of promotions")
View(phase1_new_applicants)
View(phase3_new_applicants)
View(phase3_new_applicants)
View(phase1_new_applicants)
phase1_new_applicants <- phase1_new_applicants %>%
mutate(pass_phase2 = case_when(
0 ~ applicant_id !in phase2_new_applicants$applicant_id
TRUE ~ 1
))
phase1_new_applicants <- phase1_new_applicants %>%
mutate(pass_phase2 = case_when(
0 ~ applicant_id !in phase2_new_applicants$applicant_id,
TRUE ~ 1
))
phase1_new_applicants <- phase1_new_applicants %>%
mutate(pass_phase2 = case_when(
0 ~ (applicant_id !in phase2_new_applicants$applicant_id),
TRUE ~ 1
))
phase1_new_applicants <- phase1_new_applicants %>%
mutate(pass_phase2 = case_when(
(applicant_id in phase2_new_applicants$applicant_id) ~ 1,
TRUE ~ 0
))
phase1_new_applicants %>%
ggplot(aes(x=team_applied_for,y=gpa, col=final_hired))+
geom_point()
phase1_new_applicants %>%
ggplot(aes(x=team_applied_for,y=gpa, col=as.factor(final_hired)))+
geom_point()
phase1_new_applicants %>%
ggplot(aes(x=team_applied_for,y=gpa, col=as.factor(final_hired)))+
geom_boxplot()
phase1_new_applicants %>%
ggplot(aes(x=team_applied_for,y=gpa, col=as.factor(final_hired)))+
geom_boxplot()+
xlab("team applied for")+
labs(caption=whether hired)
phase1_new_applicants %>%
ggplot(aes(x=team_applied_for,y=gpa, col=as.factor(final_hired)))+
geom_boxplot()+
xlab("team applied for")+
labs(caption="whether hired")
phase1_new_applicants %>%
ggplot(aes(x=team_applied_for,y=gpa, col=as.factor(final_hired)))+
geom_boxplot()+
xlab("team applied for")+
labs(color="whether hired")
phase1_new_applicants %>%
ggplot(aes(x=team_applied_for,y=gpa, col=as.factor(final_hired)))+
geom_boxplot()+
xlab("team applied for")+
labs(color="whether hired")
phase1_new_applicants %>%
ggplot(aes(x=team_applied_for,y=gpa, col=as.factor(final_hired)))+
geom_boxplot()+
xlab("team applied for")+
labs(color="whether hired")
View(phase2_new_applicants)
technical <- phase2_new_applicants %>%
ggolot(aes(x = work_experience, y = technical_skills, col=final_hired))+
geom_boxplot()
technical <- phase2_new_applicants %>%
ggplot(aes(x = work_experience, y = technical_skills, col=final_hired))+
geom_boxplot()
technical <- phase2_new_applicants %>%
ggplot(aes(x = work_experience, y = technical_skills, col=final_hired))+
geom_boxplot()
technical
technical <- phase2_new_applicants %>%
ggplot(aes(x = as.factor(work_experience), y = technical_skills, col=final_hired))+
geom_boxplot()
technical
technical <- phase2_new_applicants %>%
ggplot(aes(x = as.factor(work_experience), y = technical_skills, col=final_hired))+
geom_boxplot()+
xlab("level of work experience")+
ylab("technical skills")
technical
technical <- phase2_new_applicants %>%
ggplot(aes(x = as.factor(work_experience), y = technical_skills, col=as.factor(final_hired)))+
geom_boxplot()+
xlab("level of work experience")+
ylab("technical skills")
technical
technical <- phase2_new_applicants %>%
ggplot(aes(x = as.factor(work_experience), y = technical_skills, col=as.factor(final_hired)))+
geom_boxplot()+
xlab("level of work experience")+
ylab("technical skills")+
labs(color ="whether hired")
technical
technical <- phase2_new_applicants %>%
ggplot(aes(x = as.factor(work_experience), y = technical_skills, col=as.factor(final_hired)))+
geom_boxplot()+
xlab("level of work experience")+
ylab("technical skills")+
labs(color ="whether hired")
technical
technical <- phase2_new_applicants %>%
ggplot(aes(x = as.factor(work_experience), y = writing_skills, col=as.factor(final_hired)))+
geom_boxplot()+
xlab("level of work experience")+
ylab("writing skills")+
labs(color ="whether hired")
technical
technical <- phase2_new_applicants %>%
ggplot(aes(x = as.factor(work_experience), y = speaking_skills, col=as.factor(final_hired)))+
geom_boxplot()+
xlab("level of work experience")+
ylab("speaking skills")+
labs(color ="whether hired")
technical
technical <- phase2_new_applicants %>%
ggplot(aes(x = as.factor(work_experience), y = speaking_skills, col=as.factor(final_hired)))+
geom_point()+
xlab("level of work experience")+
ylab("speaking skills")+
labs(color ="whether hired")
technical
technical <- phase2_new_applicants %>%
ggplot(aes(x = as.factor(work_experience), y = speaking_skills, col=as.factor(final_hired)))+
geom_boxplot()+
xlab("level of work experience")+
ylab("speaking skills")+
labs(color ="whether hired")
technical
technical <- phase2_new_applicants %>%
ggplot(aes(x = as.factor(work_experience), y = technical_skills, col=as.factor(final_hired)))+
geom_boxplot()+
xlab("level of work experience")+
ylab("technical skills")+
labs(color ="whether hired")+
theme_light()
technical
technical <- phase2_new_applicants %>%
ggplot(aes(x = as.factor(work_experience), y = writing_skills, col=as.factor(final_hired)))+
geom_boxplot()+
xlab("level of work experience")+
ylab("writing skills")+
labs(color ="whether hired")+
theme_light()
technical
phase1_new_applicants %>%
ggplot(aes(x=team_applied_for,y=gpa, col=as.factor(final_hired)))+
geom_boxplot()+
xlab("team applied for")+
labs(color="whether hired")+
theme_light()
ldr_slry <- current %>%
filter(financial_q == '2020 Q1') %>%
group_by(employee_id) %>%
ggplot(aes(x = productivity, y = salary, color = as.factor(leadership_for_level)))+
geom_point()+
labs(color = "Leadership for Level")+
theme_light()
ldr_slry
current %>% filter(financial_q=="2020 Q4") %>% filter(gender != "Prefer not to say") %>%
ggplot(aes(x=gender, y=salary, col=gender))+
geom_boxplot()+
facet_wrap(~team, nrow=2)+
theme_light()
promotion %>% ggplot(aes(x=service_length, y= num_promotion, col=gender))+
geom_point()+xlab("service length")+ylab("number of promotions")+
theme_light()
promotion %>% ggplot(aes(x = gender, y = num_promotion)) + geom_boxplot()+ylab("number of promotions")+
theme_light()
?tbltbl_summary
tb1 <- current%>%
select(salary,leadership_for_level,gender)%>%
tbl_summary(by=gender)%>%
modify_header(label ~ "**Variable**")
tb1 <- current%>%
select(salary,leadership_for_level,gender)%>%
tbl_summary(by=gender)%>%
modify_header(label ~ "**Variable**")
modify_header(tb1, update="Table 1.")
tb1 <- current%>%
select(salary,leadership_for_level,gender)%>%
tbl_summary(by=gender)%>%
modify_header(label ~ "**Variable**")
tb1 %>% modify_caption("Leadership by gender")
tb1 <- current%>%
select(salary,leadership_for_level,gender)%>%
tbl_summary(by=gender)%>%
modify_header(label ~ "**Variable**")
tb1 %>% modify_caption("**Leadership by gender**")
