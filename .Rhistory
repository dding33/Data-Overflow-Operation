group_by(employee_id) %>%
ggplot(aes(x = leadership_for_level, y = salary, color = as.factor(gender)))+
geom_point()
black_saber_current_employees %>%
group_by(employee_id) %>%
ggplot(aes(x = role_seniority, y = salary, color = as.factor(gender)))+
geom_point()
black_saber_current_employees %>%
group_by(employee_id) %>%
ggplot(aes(x = team, y = salary, color = as.factor(gender)))+
geom_point()
phase2_new_applicants
phase1_new_applicants %>% ggplot(aes(x = as.character(gender), y = gpa)) + geom_boxplot()
#ggsave("images/gpa_hiring.png", gpa_if_hired)
gpa_if_hired <- phase1_new_applicants %>% ggplot(aes(x = as.character(final_hired), y = gpa)) + geom_boxplot()
ggsave("images/gpa_hiring.png", gpa_if_hired)
#phase1_new_applicants %>% ggplot(aes(x = as.character(final_hired), y = gpa)) + geom_point()
phase2_new_applicants %>% ggplot(aes(x = as.character(final_hired), y = speaking_skills)) + geom_boxplot()
ggsave("images/speaking_hiring.png")
phase2_new_applicants %>% ggplot(aes(x = as.character(final_hired), y = writing_skills)) + geom_boxplot()
phase2_new_applicants %>% ggplot(aes(x = as.character(final_hired), y = technical_skills)) + geom_boxplot()
phase1_new_applicants %>%
filter(final_hired == '1') %>%
group_by(applicant_id) %>%
ggplot(aes(x = gender, y = gpa))+
geom_point()
phase2_new_applicants %>%
filter(final_hired == '1') %>%
group_by(applicant_id) %>%
ggplot(aes(x = gender, y = technical_skills))+
geom_point()
phase2_new_applicants %>%
filter(final_hired == '1') %>%
group_by(applicant_id) %>%
ggplot(aes(x = gender, y = writing_skills))+
geom_point()
phase2_new_applicants %>%
filter(final_hired == '1') %>%
group_by(applicant_id) %>%
ggplot(aes(x = gender, y = speaking_skills))+
geom_point()
View(black_saber_current_employees)
View(final_hires)
View(phase1_new_applicants)
model1 <- lmer(salary ~ gender, data = black_saber_current_employees)
#install.packages("gridExtra")
#install.packages("tidyverse")
library(tidyverse)
library(cowplot)
# this should supress all code and messages
knitr::opts_chunk$set(include=FALSE,echo = TRUE)
# This chunk provides an example of some things you can do with RMarkdown to make your report creation process easier
# read in the data
black_saber_current_employees <- read_csv("data/black-saber-current-employees.csv")
# create a visualisation
my_plot <- black_saber_current_employees %>%
ggplot(aes(x = productivity)) +
geom_histogram(colour = "grey", fill = "#6C3082") +
theme_minimal() +
labs(title = "Look! A title. But do you want a title or a caption for your report?", x = "Productivity")
# save your plot in your images folder, you can specify the height and width, too
# saving this means you can add the image to your exectuve summary without having to run or rerun the code, if you wish
ggsave("images/example.png", width = 7, height = 4)
# norice how the image is included with the ![](file/path.png) below
library(tidyverse)
library(lme4)
black_saber_current_employees <- read_csv("data/black-saber-current-employees.csv")
final_hires <- read_csv("data/final-hires-newgrad_2020.csv")
phase1_new_applicants <- read_csv("data/phase1-new-grad-applicants-2020.csv")
phase2_new_applicants <- read_csv("data/phase2-new-grad-applicants-2020.csv")
phase3_new_applicants <- read_csv("data/phase3-new-grad-applicants-2020.csv")
black_saber_current_employees
final_hires
phase1_new_applicants
phase2_new_applicants
phase3_new_applicants
black_saber_current_employees$salary <- as.numeric(gsub('[$,]','',black_saber_current_employees$salary))
final_hires <- final_hires %>% mutate(final_hired = 1)
# If the applicant is hired, final_hired = 1, otherwise final_hired = NA.
phase1_new_applicants <- phase1_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE)
phase2_new_applicants <- phase2_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE)
phase3_new_applicants <- phase3_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE)
#edit axis label (name)
salary_by_gender_q1 <- black_saber_current_employees %>% filter(substring(financial_q, nchar(financial_q)) == '1') %>% ggplot(aes(x = gender, y = salary)) + geom_boxplot(aes(colour = gender))
salary_by_gender_q2 <- black_saber_current_employees %>% filter(substring(financial_q, nchar(financial_q)) == '1') %>% ggplot(aes(x = gender, y = salary)) + geom_boxplot(aes(colour = gender))
salary_by_gender_q3 <- black_saber_current_employees %>% filter(substring(financial_q, nchar(financial_q)) == '1') %>% ggplot(aes(x = gender, y = salary)) + geom_boxplot(aes(colour = gender))
salary_by_gender_q4 <- black_saber_current_employees %>% filter(substring(financial_q, nchar(financial_q)) == '1') %>% ggplot(aes(x = gender, y = salary)) + geom_boxplot(aes(colour = gender))
gender_salary <- plot_grid(salary_by_gender_q1, salary_by_gender_q2, salary_by_gender_q3, salary_by_gender_q4, labels = c("Q1","Q2","Q3","Q4"), ncol = 2, nrow = 2)
ggsave("images/gender_salary.png", gender_salary)
black_saber_current_employees %>%
filter(financial_q == '2020 Q1') %>%
group_by(employee_id) %>%
ggplot(aes(x = productivity, y = salary, color = as.factor(leadership_for_level)))+
geom_point()
ggsave("images/leadership_salary_Q1.png", width = 7, height = 4)
black_saber_current_employees %>%
filter(financial_q == '2020 Q1') %>%
group_by(employee_id) %>%
ggplot(aes(x = productivity, y = salary, color = as.factor(role_seniority)))+
geom_point()
ggsave("images/level_salary_Q1.png", width = 7, height = 4)
black_saber_current_employees %>%
filter(financial_q == '2020 Q1') %>%
group_by(employee_id) %>%
ggplot(aes(x = productivity, y = salary, color = as.factor(gender)))+
geom_point()
ggsave("images/level_salary_Q1.png", width = 7, height = 4)
black_saber_current_employees %>%
filter(financial_q == '2020 Q4') %>%
filter(role_seniority == 'Entry-level') %>%
group_by(employee_id) %>%
ggplot(aes(x = team, y = salary, color = as.factor(gender)))+
geom_point()
#ggsave("images/leadership_salary_Q1.png", width = 7, height = 4)
black_saber_current_employees %>%
filter(financial_q == '2020 Q4') %>%
filter(role_seniority == 'Junior I') %>%
group_by(employee_id) %>%
ggplot(aes(x = team, y = salary, color = as.factor(gender)))+
geom_point()
black_saber_current_employees %>%
filter(financial_q == '2020 Q4') %>%
filter(role_seniority == 'Senior I') %>%
group_by(employee_id) %>%
ggplot(aes(x = team, y = salary, color = as.factor(gender)))+
geom_point()
black_saber_current_employees %>%
filter(financial_q == '2020 Q4') %>%
filter(role_seniority == 'Manager') %>%
group_by(employee_id) %>%
ggplot(aes(x = team, y = salary, color = as.factor(gender)))+
geom_point()
black_saber_current_employees %>%
group_by(employee_id) %>%
ggplot(aes(x = leadership_for_level, y = salary, color = as.factor(gender)))+
geom_point()
black_saber_current_employees %>%
group_by(employee_id) %>%
ggplot(aes(x = role_seniority, y = salary, color = as.factor(gender)))+
geom_point()
black_saber_current_employees %>%
group_by(employee_id) %>%
ggplot(aes(x = team, y = salary, color = as.factor(gender)))+
geom_point()
model1 <- lmer(salary ~ gender, data = black_saber_current_employees)
model1 <- lmer(salary ~ gender + (1|team), data = black_saber_current_employees)
model1 <- lmer(salary ~ gender + (1|team), data = black_saber_current_employees)
summary(model1)
# The main model examine the gender bias, along with other potential biases in current employee remuneration
model1 <- lmer(salary ~ gender + (1|team), data = black_saber_current_employees)
summary(model1)
# The main model examine the gender bias, along with other potential biases in current employee remuneration
model1 <- lmer(salary ~ gender + seniority + quarter + (1|team) + (1| leadership) + (1|productivity), data = black_saber_current_employees)
# The main model examine the gender bias, along with other potential biases in current employee remuneration
model1 <- lmer(salary ~ gender + role_seniority + quarter + (1|team) + (1| leadership) + (1|productivity), data = black_saber_current_employees)
# The main model examine the gender bias, along with other potential biases in current employee remuneration
model1 <- lmer(salary ~ gender + role_seniority + financial_q + (1|team) + (1| leadership) + (1|productivity), data = black_saber_current_employees)
# The main model examine the gender bias, along with other potential biases in current employee remuneration
model1 <- lmer(salary ~ gender + role_seniority + financial_q + (1|team) + (1| leadership_for_level) + (1|productivity), data = black_saber_current_employees)
summary(model1)
# The reduced model from the main model, took productivity out from random effect
# fixed effect: gender, seniority, quarter
# random effect: team, leadership
model1 <- lmer(salary ~ gender + role_seniority + financial_q + (1|team) + (1| leadership_for_level), data = black_saber_current_employees)
summary(model1)
# The main model examine the gender bias, along with other potential biases in current employee remuneration
# fixed effect: gender, seniority, quarter
# random effect: team, leadership, productivity
model1 <- lmer(salary ~ gender + role_seniority + financial_q + (1|team) + (1| leadership_for_level) + (1|productivity), data = black_saber_current_employees)
summary(model1)
# The reduced model from the main model, took productivity out from random effect
# fixed effect: gender, seniority, quarter
# random effect: team, leadership
model2 <- lmer(salary ~ gender + role_seniority + financial_q + (1|team) + (1| leadership_for_level), data = black_saber_current_employees)
summary(model2)
lmtest::lrtest(model1, model2)
library(lme4)
lmtest::lrtest(model1, model2)
#install.packages("gridExtra")
#install.packages("tidyverse")
install.packages("lmtest")
#install.packages("gridExtra")
#install.packages("tidyverse")
#install.packages("lmtest")
library(lmtest)
#install.packages("gridExtra")
#install.packages("tidyverse")
#install.packages("lmtest")
library(lmtest)
lmtest::lrtest(model1, model2)
# The reduced model from the main model, took productivity and team out from random effect
# fixed effect: gender, seniority, quarter
# random effect: team, leadership
model3 <- lmer(salary ~ gender + role_seniority + financial_q + (1| leadership_for_level), data = black_saber_current_employees)
#summary(model3)
# Likelihood ratio test comparing the two models, small p value indicating the second model is better
lmtest::lrtest(model2, model3)
# The reduced model from the main model, took productivity and leadership out from random effect
# fixed effect: gender, seniority, quarter
# random effect: team
model4 <- lmer(salary ~ gender + role_seniority + financial_q + (1| team), data = black_saber_current_employees)
#summary(model3)
# Likelihood ratio test comparing the two models, small p value indicating the second model is better
lmtest::lrtest(model3, model4)
final_hires <- final_hires %>% mutate(final_hired = 1)
# If the applicant is hired, final_hired = 1, otherwise final_hired = NA.
phase1_new_applicants <- phase1_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE) %>% merge(phase2_new_applicants, by = "application_id", all = TRUE)
phase3_new_applicants
phase2_new_applicants
# If the applicant is hired, final_hired = 1, otherwise final_hired = NA.
phase1_new_applicants <- phase1_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE) phase1_new_applicants <- phase1_new_applicants %>% merge(phase2_new_applicants, by = "application_id", all = TRUE)
# If the applicant is hired, final_hired = 1, otherwise final_hired = NA.
phase1_new_applicants <- phase1_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE)
phase1_new_applicants <- phase1_new_applicants %>% merge(phase2_new_applicants, by = "application_id", all = TRUE)
final_hires <- final_hires %>% mutate(final_hired = 1)
# If the applicant is hired, final_hired = 1, otherwise final_hired = NA.
phase1_new_applicants <- phase1_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE) %>% merge(phase2_new_applicants, by = "applicant_id", all = TRUE)
phase2_new_applicants <- phase2_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE)%>% merge(phase3_new_applicants, by = "applicant_id", all = TRUE)
phase3_new_applicants <- phase3_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE)
phase2_new_applicants
phase2_new_applicants
phase1_new_applicants
# If the applicant is hired, final_hired = 1, otherwise final_hired = NA.
final_hires <- final_hires %>% mutate(final_hired = 1)
# If the applicant passed phase1, pass_phase1 = 1, otherwise = NA.
phase2_temp <- phase2_new_applicants %>% select(applicant_id, technical_skills) %>% rename(pass_phase1 = technical_skills) %>% mutate(pass_phase1 = 1)
phase1_new_applicants <- phase1_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE) %>% merge(phase2_temp, by = "applicant_id", all = TRUE)
phase2_new_applicants <- phase2_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE)%>% merge(phase3_new_applicants, by = "applicant_id", all = TRUE)
phase3_new_applicants <- phase3_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE)
phase1_new_applicants
black_saber_current_employees <- read_csv("data/black-saber-current-employees.csv")
final_hires <- read_csv("data/final-hires-newgrad_2020.csv")
phase1_new_applicants <- read_csv("data/phase1-new-grad-applicants-2020.csv")
phase2_new_applicants <- read_csv("data/phase2-new-grad-applicants-2020.csv")
phase3_new_applicants <- read_csv("data/phase3-new-grad-applicants-2020.csv")
# If the applicant is hired, final_hired = 1, otherwise final_hired = NA.
final_hires <- final_hires %>% mutate(final_hired = 1)
# If the applicant passed phase1, pass_phase1 = 1, otherwise = NA.
phase2_temp <- phase2_new_applicants %>% select(applicant_id, technical_skills) %>% rename(pass_phase1 = technical_skills) %>% mutate(pass_phase1 = 1)
phase1_new_applicants <- phase1_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE) %>% merge(phase2_temp, by = "applicant_id", all = TRUE)
phase2_new_applicants <- phase2_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE)%>% merge(phase3_new_applicants, by = "applicant_id", all = TRUE)
phase3_new_applicants <- phase3_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE)
phase1_new_applicants
phase2_temp <- phase2_new_applicants %>% select(applicant_id, technical_skills) %>% rename(pass_phase1 = technical_skills) %>% mutate(pass_phase1 = 1)
phase1_new_applicants <- phase1_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE) %>% merge(phase2_temp, by = "applicant_id", all = TRUE)
phase3_new_applicants
# If the applicant is hired, final_hired = 1, otherwise final_hired = NA.
final_hires <- final_hires %>% mutate(final_hired = 1)
# If the applicant passed phase1, pass_phase1 = 1, otherwise = NA.
phase2_temp <- phase2_new_applicants %>% select(applicant_id, technical_skills) %>% rename(pass_phase1 = technical_skills) %>% mutate(pass_phase1 = 1)
# If the applicant passed phase2, pass_phase2 = 1, otherwise = NA.
phase3_temp <- phase3_new_applicants %>% select(applicant_id, interviewer_rating_1) %>% rename(pass_phase2 = interviewer_rating_1) %>% mutate(pass_phase2 = 1)
phase1_new_applicants <- phase1_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE) %>% merge(phase2_temp, by = "applicant_id", all = TRUE)
phase2_new_applicants <- phase2_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE)%>% merge(phase3_temp, by = "applicant_id", all = TRUE)
phase3_new_applicants <- phase3_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE)
black_saber_current_employees <- read_csv("data/black-saber-current-employees.csv")
final_hires <- read_csv("data/final-hires-newgrad_2020.csv")
phase1_new_applicants <- read_csv("data/phase1-new-grad-applicants-2020.csv")
phase2_new_applicants <- read_csv("data/phase2-new-grad-applicants-2020.csv")
phase3_new_applicants <- read_csv("data/phase3-new-grad-applicants-2020.csv")
# If the applicant is hired, final_hired = 1, otherwise final_hired = NA.
final_hires <- final_hires %>% mutate(final_hired = 1)
# If the applicant passed phase1, pass_phase1 = 1, otherwise = NA.
phase2_temp <- phase2_new_applicants %>% select(applicant_id, technical_skills) %>% rename(pass_phase1 = technical_skills) %>% mutate(pass_phase1 = 1)
# If the applicant passed phase2, pass_phase2 = 1, otherwise = NA.
phase3_temp <- phase3_new_applicants %>% select(applicant_id, interviewer_rating_1) %>% rename(pass_phase2 = interviewer_rating_1) %>% mutate(pass_phase2 = 1)
phase1_new_applicants <- phase1_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE) %>% merge(phase2_temp, by = "applicant_id", all = TRUE)
phase2_new_applicants <- phase2_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE)%>% merge(phase3_temp, by = "applicant_id", all = TRUE)
phase3_new_applicants <- phase3_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE)
phase2_new_applicants
#edit axis label (name)
salary_by_gender_q1 <- black_saber_current_employees %>% filter(substring(financial_q, nchar(financial_q)) == '1') %>% ggplot(aes(x = gender, y = salary)) + geom_boxplot(aes(colour = gender))
salary_by_gender_q2 <- black_saber_current_employees %>% filter(substring(financial_q, nchar(financial_q)) == '1') %>% ggplot(aes(x = gender, y = salary)) + geom_boxplot(aes(colour = gender))
salary_by_gender_q3 <- black_saber_current_employees %>% filter(substring(financial_q, nchar(financial_q)) == '1') %>% ggplot(aes(x = gender, y = salary)) + geom_boxplot(aes(colour = gender))
salary_by_gender_q4 <- black_saber_current_employees %>% filter(substring(financial_q, nchar(financial_q)) == '1') %>% ggplot(aes(x = gender, y = salary)) + geom_boxplot(aes(colour = gender))
gender_salary <- plot_grid(salary_by_gender_q1, salary_by_gender_q2, salary_by_gender_q3, salary_by_gender_q4, labels = c("Q1","Q2","Q3","Q4"), ncol = 2, nrow = 2)
ggsave("images/gender_salary.png", gender_salary)
gpa_if_hired <- phase1_new_applicants %>% ggplot(aes(x = as.character(pass_phase1), y = gpa)) + geom_boxplot()
ggsave("images/gpa_phase1.png", gpa_if_pass_phase1)
gpa_if_pass_phase1 <- phase1_new_applicants %>% ggplot(aes(x = as.character(pass_phase1), y = gpa)) + geom_boxplot()
ggsave("images/gpa_phase1.png", gpa_if_pass_phase1)
```{r}
#same scale
phase2_new_applicants %>% ggplot(aes(x = as.character(pass_phase2), y = speaking_skills)) + geom_boxplot()
ggsave("images/speaking_phase2.png")
![](images/speaking_hiring.png)
![](images/speaking_phase2.png)
phase2_new_applicants %>% ggplot(aes(x = as.character(final_hired), y = writing_skills)) + geom_boxplot()
phase2_new_applicants %>% ggplot(aes(x = as.character(final_hired), y = writing_skills)) + geom_boxplot()
ggsave("images/writing_hired.png")
### Writing Skills VS if hired
```{r}
phase2_new_applicants %>% ggplot(aes(x = as.character(final_hired), y = writing_skills)) + geom_boxplot()
ggsave("images/writing_hired.png")
```
![](images/writing_hired.png)
phase2_new_applicants %>% ggplot(aes(x = as.character(pass_phase2), y = writing_skills)) + geom_boxplot()
ggsave("images/writing_phase2.png")
phase1_new_applicants
# pass_phase1 ~ gender* cv gpa cover_letter (phase1)
model2.1 <- glm(pass_phase1 ~ gender + gpa + extracurriculars + cv + work_experience, family = binomial(link = "logit"), data = phase1_new_applicants)
summary(model2.1)
#install.packages("gridExtra")
#install.packages("tidyverse")
#install.packages("lmtest")
library(lmtest)
library(tidyverse)
library(cowplot)
# this should supress all code and messages
knitr::opts_chunk$set(include=FALSE,echo = TRUE)
# This chunk provides an example of some things you can do with RMarkdown to make your report creation process easier
# read in the data
black_saber_current_employees <- read_csv("data/black-saber-current-employees.csv")
# create a visualisation
my_plot <- black_saber_current_employees %>%
ggplot(aes(x = productivity)) +
geom_histogram(colour = "grey", fill = "#6C3082") +
theme_minimal() +
labs(title = "Look! A title. But do you want a title or a caption for your report?", x = "Productivity")
# save your plot in your images folder, you can specify the height and width, too
# saving this means you can add the image to your exectuve summary without having to run or rerun the code, if you wish
ggsave("images/example.png", width = 7, height = 4)
# norice how the image is included with the ![](file/path.png) below
library(tidyverse)
library(lme4)
black_saber_current_employees <- read_csv("data/black-saber-current-employees.csv")
final_hires <- read_csv("data/final-hires-newgrad_2020.csv")
phase1_new_applicants <- read_csv("data/phase1-new-grad-applicants-2020.csv")
phase2_new_applicants <- read_csv("data/phase2-new-grad-applicants-2020.csv")
phase3_new_applicants <- read_csv("data/phase3-new-grad-applicants-2020.csv")
black_saber_current_employees
final_hires
phase1_new_applicants
phase2_new_applicants
phase3_new_applicants
black_saber_current_employees$salary <- as.numeric(gsub('[$,]','',black_saber_current_employees$salary))
# If the applicant is hired, final_hired = 1, otherwise final_hired = NA.
final_hires <- final_hires %>% mutate(final_hired = 1)
# If the applicant passed phase1, pass_phase1 = 1, otherwise = NA.
phase2_temp <- phase2_new_applicants %>% select(applicant_id, technical_skills) %>% rename(pass_phase1 = technical_skills) %>% mutate(pass_phase1 = 1)
# If the applicant passed phase2, pass_phase2 = 1, otherwise = NA.
phase3_temp <- phase3_new_applicants %>% select(applicant_id, interviewer_rating_1) %>% rename(pass_phase2 = interviewer_rating_1) %>% mutate(pass_phase2 = 1)
phase1_new_applicants <- phase1_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE) %>% merge(phase2_temp, by = "applicant_id", all = TRUE)
phase1_new_applicants <- phase1_new_applicants %>% mutate(pass_phase1 = ifelse(is.na(pass_phase1), 0, 1)) %>% mutate(final_hired = ifelse(is.na(final_hired), 0, 1))
phase2_new_applicants <- phase2_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE)%>% merge(phase3_temp, by = "applicant_id", all = TRUE)
phase2_new_applicants <- phase2_new_applicants %>% mutate(pass_phase2 = ifelse(is.na(pass_phase2), 0, 1)) %>% mutate(final_hired = ifelse(is.na(final_hired), 0, 1))
phase2_temp1 <- phase2_new_applicants %>% select(-final_hired, -pass_phase2)
phase3_new_applicants <- phase3_new_applicants %>% merge(final_hires, by = "applicant_id", all = TRUE) %>% inner_join(phase2_temp1, by = "applicant_id")
phase3_new_applicants <- phase3_new_applicants %>% mutate(final_hired = ifelse(is.na(final_hired), 0, 1))
#edit axis label (name)
salary_by_gender_q1 <- black_saber_current_employees %>% filter(substring(financial_q, nchar(financial_q)) == '1') %>% ggplot(aes(x = gender, y = salary)) + geom_boxplot(aes(colour = gender))
salary_by_gender_q2 <- black_saber_current_employees %>% filter(substring(financial_q, nchar(financial_q)) == '1') %>% ggplot(aes(x = gender, y = salary)) + geom_boxplot(aes(colour = gender))
salary_by_gender_q3 <- black_saber_current_employees %>% filter(substring(financial_q, nchar(financial_q)) == '1') %>% ggplot(aes(x = gender, y = salary)) + geom_boxplot(aes(colour = gender))
salary_by_gender_q4 <- black_saber_current_employees %>% filter(substring(financial_q, nchar(financial_q)) == '1') %>% ggplot(aes(x = gender, y = salary)) + geom_boxplot(aes(colour = gender))
gender_salary <- plot_grid(salary_by_gender_q1, salary_by_gender_q2, salary_by_gender_q3, salary_by_gender_q4, labels = c("Q1","Q2","Q3","Q4"), ncol = 2, nrow = 2)
ggsave("images/gender_salary.png", gender_salary)
black_saber_current_employees %>%
filter(financial_q == '2020 Q1') %>%
group_by(employee_id) %>%
ggplot(aes(x = productivity, y = salary, color = as.factor(leadership_for_level)))+
geom_point()
ggsave("images/leadership_salary_Q1.png", width = 7, height = 4)
black_saber_current_employees %>%
filter(financial_q == '2020 Q1') %>%
group_by(employee_id) %>%
ggplot(aes(x = productivity, y = salary, color = as.factor(role_seniority)))+
geom_point()
ggsave("images/level_salary_Q1.png", width = 7, height = 4)
black_saber_current_employees %>%
filter(financial_q == '2020 Q1') %>%
group_by(employee_id) %>%
ggplot(aes(x = productivity, y = salary, color = as.factor(gender)))+
geom_point()
ggsave("images/level_salary_Q1.png", width = 7, height = 4)
black_saber_current_employees %>%
filter(financial_q == '2020 Q4') %>%
filter(role_seniority == 'Entry-level') %>%
group_by(employee_id) %>%
ggplot(aes(x = team, y = salary, color = as.factor(gender)))+
geom_point()
#ggsave("images/leadership_salary_Q1.png", width = 7, height = 4)
black_saber_current_employees %>%
filter(financial_q == '2020 Q4') %>%
filter(role_seniority == 'Junior I') %>%
group_by(employee_id) %>%
ggplot(aes(x = team, y = salary, color = as.factor(gender)))+
geom_point()
black_saber_current_employees %>%
filter(financial_q == '2020 Q4') %>%
filter(role_seniority == 'Senior I') %>%
group_by(employee_id) %>%
ggplot(aes(x = team, y = salary, color = as.factor(gender)))+
geom_point()
black_saber_current_employees %>%
filter(financial_q == '2020 Q4') %>%
filter(role_seniority == 'Manager') %>%
group_by(employee_id) %>%
ggplot(aes(x = team, y = salary, color = as.factor(gender)))+
geom_point()
black_saber_current_employees %>%
group_by(employee_id) %>%
ggplot(aes(x = leadership_for_level, y = salary, color = as.factor(gender)))+
geom_point()
black_saber_current_employees %>%
group_by(employee_id) %>%
ggplot(aes(x = role_seniority, y = salary, color = as.factor(gender)))+
geom_point()
black_saber_current_employees %>%
group_by(employee_id) %>%
ggplot(aes(x = team, y = salary, color = as.factor(gender)))+
geom_point()
# The main model examine the gender bias, along with other potential biases in current employee remuneration
# fixed effect: gender, seniority, quarter
# random effect: team, leadership, productivity
model1 <- lmer(salary ~ gender + role_seniority + financial_q + (1|team) + (1| leadership_for_level) + (1|productivity), data = black_saber_current_employees)
summary(model1)
# The reduced model from the main model, took productivity out from random effect
# fixed effect: gender, seniority, quarter
# random effect: team, leadership
model2 <- lmer(salary ~ gender + role_seniority + financial_q + (1|team) + (1| leadership_for_level), data = black_saber_current_employees)
summary(model2)
# Likelihood ratio test comparing the two models, small p value indicating the second model is better
lmtest::lrtest(model1, model2)
# The reduced model from the main model, took productivity and team out from random effect
# fixed effect: gender, seniority, quarter
# random effect: leadership
model3 <- lmer(salary ~ gender + role_seniority + financial_q + (1| leadership_for_level), data = black_saber_current_employees)
#summary(model3)
# Likelihood ratio test comparing the two models, small p value indicating the second model is better
lmtest::lrtest(model2, model3)
# The reduced model from the main model, took productivity and leadership out from random effect
# fixed effect: gender, seniority, quarter
# random effect: team
model4 <- lmer(salary ~ gender + role_seniority + financial_q + (1| team), data = black_saber_current_employees)
#summary(model3)
# Likelihood ratio test comparing the two models, small p value indicating the second model is better
lmtest::lrtest(model3, model4)
phase2_new_applicants
phase1_new_applicants %>% ggplot(aes(x = as.character(gender), y = gpa)) + geom_boxplot()
#ggsave("images/gpa_hiring.png", gpa_if_hired)
gpa_if_hired <- phase1_new_applicants %>% ggplot(aes(x = as.character(final_hired), y = gpa)) + geom_boxplot()
ggsave("images/gpa_hiring.png", gpa_if_hired)
gpa_if_pass_phase1 <- phase1_new_applicants %>% ggplot(aes(x = as.character(pass_phase1), y = gpa)) + geom_boxplot()
ggsave("images/gpa_phase1.png", gpa_if_pass_phase1)
#phase1_new_applicants %>% ggplot(aes(x = as.character(final_hired), y = gpa)) + geom_point()
#same scale
phase2_new_applicants %>% ggplot(aes(x = as.character(final_hired), y = speaking_skills)) + geom_boxplot()
ggsave("images/speaking_hiring.png")
#same scale
phase2_new_applicants %>% ggplot(aes(x = as.character(pass_phase2), y = speaking_skills)) + geom_boxplot()
ggsave("images/speaking_phase2.png")
phase2_new_applicants %>% ggplot(aes(x = as.character(final_hired), y = writing_skills)) + geom_boxplot()
ggsave("images/writing_hired.png")
phase2_new_applicants %>% ggplot(aes(x = as.character(pass_phase2), y = writing_skills)) + geom_boxplot()
ggsave("images/writing_phase2.png")
phase2_new_applicants %>% ggplot(aes(x = as.character(final_hired), y = technical_skills)) + geom_boxplot()
phase1_new_applicants %>%
filter(final_hired == '1') %>%
group_by(applicant_id) %>%
ggplot(aes(x = gender, y = gpa))+
geom_point()
phase2_new_applicants %>%
filter(final_hired == '1') %>%
group_by(applicant_id) %>%
ggplot(aes(x = gender, y = technical_skills))+
geom_point()
phase2_new_applicants %>%
filter(final_hired == '1') %>%
group_by(applicant_id) %>%
ggplot(aes(x = gender, y = writing_skills))+
geom_point()
phase2_new_applicants %>%
filter(final_hired == '1') %>%
group_by(applicant_id) %>%
ggplot(aes(x = gender, y = speaking_skills))+
geom_point()
# pass_phase1 ~ gender* cv gpa cover_letter (phase1)
model2.1 <- glm(pass_phase1 ~ gender + gpa + extracurriculars + cv + work_experience, family = binomial(link = "logit"), data = phase1_new_applicants)
summary(model2.1)
# pass_phase2 ~ gender* cv gpa cover_letter tech writing speaking (phase2)
# everyone passed phase 1 has cv
model2.2 <- glm(pass_phase2 ~ gender + team_applied_for + cover_letter + extracurriculars + work_experience + technical_skills + writing_skills + leadership_presence + speaking_skills, family = binomial(link = "logit"), data = phase2_new_applicants)
summary(model2.2)
# final_hired ~ gender* cv gpa cover_letter tech writing speaking rating1 rating2 (phase3)
# everyone passed phase 1 has cv
# too few datapoints model can't converge... the only model that can converge is to use gender
phase3_new_applicants <- phase3_new_applicants %>% mutate(avg = (interviewer_rating_1+interviewer_rating_2)/2)
model2.3 <- glm(final_hired ~ gender, family = binomial(link = "logit"), data = phase3_new_applicants)
summary(model2.3)
#table(phase3_new_applicants$gender, phase3_new_applicants$final_hired)
table(phase3_new_applicants$avg)
phase3_new_applicants
# final_hired ~ gender* cv gpa cover_letter tech writing speaking rating1 rating2 (phase3)
# everyone passed phase 1 has cv
# too few datapoints model can't converge... the only model that can converge is to use gender
phase3_new_applicants <- phase3_new_applicants %>% mutate(avg = (interviewer_rating_1+interviewer_rating_2)/2)
model2.3 <- glm(final_hired ~ gender + avg, family = binomial(link = "logit"), data = phase3_new_applicants)
summary(model2.3)
#table(phase3_new_applicants$gender, phase3_new_applicants$final_hired)
table(phase3_new_applicants$avg)
table(phase3_new_applicants$avg)
model2.3 <- glm(final_hired ~ avg, family = binomial(link = "logit"), data = phase3_new_applicants)
# final_hired ~ gender* cv gpa cover_letter tech writing speaking rating1 rating2 (phase3)
# everyone passed phase 1 has cv
# too few datapoints model can't converge... the only model that can converge is to use gender
phase3_new_applicants <- phase3_new_applicants %>% mutate(avg = (interviewer_rating_1+interviewer_rating_2)/2)
model2.3 <- glm(final_hired ~ avg, family = binomial(link = "logit"), data = phase3_new_applicants)
summary(model2.3)
#table(phase3_new_applicants$gender, phase3_new_applicants$final_hired)
table(phase3_new_applicants$avg)
phase3_new_applicants
anova(model1)
